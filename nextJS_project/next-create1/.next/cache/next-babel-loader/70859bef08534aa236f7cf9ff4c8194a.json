{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nexport function getErrorMessage(error) {\n  if (error.graphQLErrors) {\n    var _iterator = _createForOfIteratorHelper(error.graphQLErrors),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var graphQLError = _step.value;\n\n        if (graphQLError.extensions && graphQLError.extensions.code === 'BAD_USER_INPUT') {\n          return graphQLError.message;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return error.message;\n}","map":{"version":3,"sources":["/Users/qintao.yao/tman/TestDemo2/nextJS_project/next-create1/lib/form.js"],"names":["getErrorMessage","error","graphQLErrors","graphQLError","extensions","code","message"],"mappings":";;;;;;AAAA,OAAO,SAASA,eAAT,CAAyBC,KAAzB,EAAgC;AACrC,MAAIA,KAAK,CAACC,aAAV,EAAyB;AAAA,+CACID,KAAK,CAACC,aADV;AAAA;;AAAA;AACvB,0DAAgD;AAAA,YAArCC,YAAqC;;AAC9C,YACEA,YAAY,CAACC,UAAb,IACAD,YAAY,CAACC,UAAb,CAAwBC,IAAxB,KAAiC,gBAFnC,EAGE;AACA,iBAAOF,YAAY,CAACG,OAApB;AACD;AACF;AARsB;AAAA;AAAA;AAAA;AAAA;AASxB;;AACD,SAAOL,KAAK,CAACK,OAAb;AACD","sourcesContent":["export function getErrorMessage(error) {\n  if (error.graphQLErrors) {\n    for (const graphQLError of error.graphQLErrors) {\n      if (\n        graphQLError.extensions &&\n        graphQLError.extensions.code === 'BAD_USER_INPUT'\n      ) {\n        return graphQLError.message\n      }\n    }\n  }\n  return error.message\n}\n"]},"metadata":{},"sourceType":"module"}