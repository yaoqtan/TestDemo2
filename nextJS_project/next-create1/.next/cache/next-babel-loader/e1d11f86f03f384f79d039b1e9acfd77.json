{"ast":null,"code":"import { AuthenticationError, UserInputError } from 'apollo-server-micro';\nimport cookie from 'cookie';\nimport jwt from 'jsonwebtoken';\nimport getConfig from 'next/config';\nimport bcrypt from 'bcrypt';\nimport v4 from 'uuid/v4';\nconst JWT_SECRET = getConfig().serverRuntimeConfig.JWT_SECRET;\nconst users = [];\n\nfunction createUser(data) {\n  const salt = bcrypt.genSaltSync();\n  return {\n    id: v4(),\n    email: data.email,\n    hashedPassword: bcrypt.hashSync(data.password, salt)\n  };\n}\n\nfunction validPassword(user, password) {\n  return bcrypt.compareSync(password, user.hashedPassword);\n}\n\nexport const resolvers = {\n  Query: {\n    async viewer(_parent, _args, context, _info) {\n      var _context$req$headers$;\n\n      const {\n        token\n      } = cookie.parse((_context$req$headers$ = context.req.headers.cookie) !== null && _context$req$headers$ !== void 0 ? _context$req$headers$ : '');\n\n      if (token) {\n        try {\n          const {\n            id,\n            email\n          } = jwt.verify(token, JWT_SECRET);\n          return users.find(user => user.id === id && user.email === email);\n        } catch {\n          throw new AuthenticationError('Authentication token is invalid, please log in');\n        }\n      }\n    }\n\n  },\n  Mutation: {\n    async signUp(_parent, args, _context, _info) {\n      const user = createUser(args.input);\n      users.push(user);\n      return {\n        user\n      };\n    },\n\n    async signIn(_parent, args, context, _info) {\n      const user = users.find(user => user.email === args.input.email);\n\n      if (user && validPassword(user, args.input.password)) {\n        const token = jwt.sign({\n          email: user.email,\n          id: user.id,\n          time: new Date()\n        }, JWT_SECRET, {\n          expiresIn: '6h'\n        });\n        context.res.setHeader('Set-Cookie', cookie.serialize('token', token, {\n          httpOnly: true,\n          maxAge: 6 * 60 * 60,\n          path: '/',\n          sameSite: 'lax',\n          secure: false\n        }));\n        return {\n          user\n        };\n      }\n\n      throw new UserInputError('Invalid email and password combination');\n    },\n\n    async signOut(_parent, _args, context, _info) {\n      context.res.setHeader('Set-Cookie', cookie.serialize('token', '', {\n        httpOnly: true,\n        maxAge: -1,\n        path: '/',\n        sameSite: 'lax',\n        secure: false\n      }));\n      return true;\n    }\n\n  }\n};","map":{"version":3,"sources":["/Users/qintao.yao/tman/TestDemo2/nextJS_project/next-create1/apollo/resolvers.js"],"names":["AuthenticationError","UserInputError","cookie","jwt","getConfig","bcrypt","v4","JWT_SECRET","serverRuntimeConfig","users","createUser","data","salt","genSaltSync","id","email","hashedPassword","hashSync","password","validPassword","user","compareSync","resolvers","Query","viewer","_parent","_args","context","_info","token","parse","req","headers","verify","find","Mutation","signUp","args","_context","input","push","signIn","sign","time","Date","expiresIn","res","setHeader","serialize","httpOnly","maxAge","path","sameSite","secure","signOut"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,cAA9B,QAAoD,qBAApD;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,EAAP,MAAe,SAAf;AAEA,MAAMC,UAAU,GAAGH,SAAS,GAAGI,mBAAZ,CAAgCD,UAAnD;AAEA,MAAME,KAAK,GAAG,EAAd;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,QAAMC,IAAI,GAAGP,MAAM,CAACQ,WAAP,EAAb;AAEA,SAAO;AACLC,IAAAA,EAAE,EAAER,EAAE,EADD;AAELS,IAAAA,KAAK,EAAEJ,IAAI,CAACI,KAFP;AAGLC,IAAAA,cAAc,EAAEX,MAAM,CAACY,QAAP,CAAgBN,IAAI,CAACO,QAArB,EAA+BN,IAA/B;AAHX,GAAP;AAKD;;AAED,SAASO,aAAT,CAAuBC,IAAvB,EAA6BF,QAA7B,EAAuC;AACrC,SAAOb,MAAM,CAACgB,WAAP,CAAmBH,QAAnB,EAA6BE,IAAI,CAACJ,cAAlC,CAAP;AACD;;AAED,OAAO,MAAMM,SAAS,GAAG;AACvBC,EAAAA,KAAK,EAAE;AACL,UAAMC,MAAN,CAAaC,OAAb,EAAsBC,KAAtB,EAA6BC,OAA7B,EAAsCC,KAAtC,EAA6C;AAAA;;AAC3C,YAAM;AAAEC,QAAAA;AAAF,UAAY3B,MAAM,CAAC4B,KAAP,0BAAaH,OAAO,CAACI,GAAR,CAAYC,OAAZ,CAAoB9B,MAAjC,yEAA2C,EAA3C,CAAlB;;AACA,UAAI2B,KAAJ,EAAW;AACT,YAAI;AACF,gBAAM;AAAEf,YAAAA,EAAF;AAAMC,YAAAA;AAAN,cAAgBZ,GAAG,CAAC8B,MAAJ,CAAWJ,KAAX,EAAkBtB,UAAlB,CAAtB;AAEA,iBAAOE,KAAK,CAACyB,IAAN,CAAYd,IAAD,IAAUA,IAAI,CAACN,EAAL,KAAYA,EAAZ,IAAkBM,IAAI,CAACL,KAAL,KAAeA,KAAtD,CAAP;AACD,SAJD,CAIE,MAAM;AACN,gBAAM,IAAIf,mBAAJ,CACJ,gDADI,CAAN;AAGD;AACF;AACF;;AAdI,GADgB;AAiBvBmC,EAAAA,QAAQ,EAAE;AACR,UAAMC,MAAN,CAAaX,OAAb,EAAsBY,IAAtB,EAA4BC,QAA5B,EAAsCV,KAAtC,EAA6C;AAC3C,YAAMR,IAAI,GAAGV,UAAU,CAAC2B,IAAI,CAACE,KAAN,CAAvB;AAEA9B,MAAAA,KAAK,CAAC+B,IAAN,CAAWpB,IAAX;AAEA,aAAO;AAAEA,QAAAA;AAAF,OAAP;AACD,KAPO;;AASR,UAAMqB,MAAN,CAAahB,OAAb,EAAsBY,IAAtB,EAA4BV,OAA5B,EAAqCC,KAArC,EAA4C;AAC1C,YAAMR,IAAI,GAAGX,KAAK,CAACyB,IAAN,CAAYd,IAAD,IAAUA,IAAI,CAACL,KAAL,KAAesB,IAAI,CAACE,KAAL,CAAWxB,KAA/C,CAAb;;AAEA,UAAIK,IAAI,IAAID,aAAa,CAACC,IAAD,EAAOiB,IAAI,CAACE,KAAL,CAAWrB,QAAlB,CAAzB,EAAsD;AACpD,cAAMW,KAAK,GAAG1B,GAAG,CAACuC,IAAJ,CACZ;AAAE3B,UAAAA,KAAK,EAAEK,IAAI,CAACL,KAAd;AAAqBD,UAAAA,EAAE,EAAEM,IAAI,CAACN,EAA9B;AAAkC6B,UAAAA,IAAI,EAAE,IAAIC,IAAJ;AAAxC,SADY,EAEZrC,UAFY,EAGZ;AACEsC,UAAAA,SAAS,EAAE;AADb,SAHY,CAAd;AAQAlB,QAAAA,OAAO,CAACmB,GAAR,CAAYC,SAAZ,CACE,YADF,EAEE7C,MAAM,CAAC8C,SAAP,CAAiB,OAAjB,EAA0BnB,KAA1B,EAAiC;AAC/BoB,UAAAA,QAAQ,EAAE,IADqB;AAE/BC,UAAAA,MAAM,EAAE,IAAI,EAAJ,GAAS,EAFc;AAG/BC,UAAAA,IAAI,EAAE,GAHyB;AAI/BC,UAAAA,QAAQ,EAAE,KAJqB;AAK/BC,UAAAA,MAAM;AALyB,SAAjC,CAFF;AAWA,eAAO;AAAEjC,UAAAA;AAAF,SAAP;AACD;;AAED,YAAM,IAAInB,cAAJ,CAAmB,wCAAnB,CAAN;AACD,KApCO;;AAqCR,UAAMqD,OAAN,CAAc7B,OAAd,EAAuBC,KAAvB,EAA8BC,OAA9B,EAAuCC,KAAvC,EAA8C;AAC5CD,MAAAA,OAAO,CAACmB,GAAR,CAAYC,SAAZ,CACE,YADF,EAEE7C,MAAM,CAAC8C,SAAP,CAAiB,OAAjB,EAA0B,EAA1B,EAA8B;AAC5BC,QAAAA,QAAQ,EAAE,IADkB;AAE5BC,QAAAA,MAAM,EAAE,CAAC,CAFmB;AAG5BC,QAAAA,IAAI,EAAE,GAHsB;AAI5BC,QAAAA,QAAQ,EAAE,KAJkB;AAK5BC,QAAAA,MAAM;AALsB,OAA9B,CAFF;AAWA,aAAO,IAAP;AACD;;AAlDO;AAjBa,CAAlB","sourcesContent":["import { AuthenticationError, UserInputError } from 'apollo-server-micro'\nimport cookie from 'cookie'\nimport jwt from 'jsonwebtoken'\nimport getConfig from 'next/config'\nimport bcrypt from 'bcrypt'\nimport v4 from 'uuid/v4'\n\nconst JWT_SECRET = getConfig().serverRuntimeConfig.JWT_SECRET\n\nconst users = []\n\nfunction createUser(data) {\n  const salt = bcrypt.genSaltSync()\n\n  return {\n    id: v4(),\n    email: data.email,\n    hashedPassword: bcrypt.hashSync(data.password, salt),\n  }\n}\n\nfunction validPassword(user, password) {\n  return bcrypt.compareSync(password, user.hashedPassword)\n}\n\nexport const resolvers = {\n  Query: {\n    async viewer(_parent, _args, context, _info) {\n      const { token } = cookie.parse(context.req.headers.cookie ?? '')\n      if (token) {\n        try {\n          const { id, email } = jwt.verify(token, JWT_SECRET)\n\n          return users.find((user) => user.id === id && user.email === email)\n        } catch {\n          throw new AuthenticationError(\n            'Authentication token is invalid, please log in'\n          )\n        }\n      }\n    },\n  },\n  Mutation: {\n    async signUp(_parent, args, _context, _info) {\n      const user = createUser(args.input)\n\n      users.push(user)\n\n      return { user }\n    },\n\n    async signIn(_parent, args, context, _info) {\n      const user = users.find((user) => user.email === args.input.email)\n\n      if (user && validPassword(user, args.input.password)) {\n        const token = jwt.sign(\n          { email: user.email, id: user.id, time: new Date() },\n          JWT_SECRET,\n          {\n            expiresIn: '6h',\n          }\n        )\n\n        context.res.setHeader(\n          'Set-Cookie',\n          cookie.serialize('token', token, {\n            httpOnly: true,\n            maxAge: 6 * 60 * 60,\n            path: '/',\n            sameSite: 'lax',\n            secure: process.env.NODE_ENV === 'production',\n          })\n        )\n\n        return { user }\n      }\n\n      throw new UserInputError('Invalid email and password combination')\n    },\n    async signOut(_parent, _args, context, _info) {\n      context.res.setHeader(\n        'Set-Cookie',\n        cookie.serialize('token', '', {\n          httpOnly: true,\n          maxAge: -1,\n          path: '/',\n          sameSite: 'lax',\n          secure: process.env.NODE_ENV === 'production',\n        })\n      )\n\n      return true\n    },\n  },\n}\n"]},"metadata":{},"sourceType":"module"}