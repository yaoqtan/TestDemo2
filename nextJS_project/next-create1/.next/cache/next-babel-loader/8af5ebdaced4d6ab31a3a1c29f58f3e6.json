{"ast":null,"code":"var _jsxFileName = \"/Users/qintao.yao/tman/TestDemo2/nextJS_project/next-create1/apollo/client.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nlet globalApolloClient = null;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApollo(PageComponent, {\n  ssr = true\n} = {}) {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    const client = apolloClient || initApolloClient(undefined, apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const {\n        AppTree\n      } = ctx; // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n\n      const apolloClient = ctx.apolloClient = initApolloClient({\n        res: ctx.res,\n        req: ctx.req\n      }); // Run wrapped getInitialProps methods\n\n      let pageProps = {};\n\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } // Only on the server:\n\n\n      if (true) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        } // Only if ssr is enabled\n\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const {\n              getDataFromTree\n            } = await import('@apollo/react-ssr');\n            await getDataFromTree(__jsx(AppTree, {\n              pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {\n                apolloClient\n              }),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 15\n              }\n            }));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          } // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n\n\n          Head.rewind();\n        }\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apolloClient.cache.extract();\n      return _objectSpread(_objectSpread({}, pageProps), {}, {\n        apolloState\n      });\n    };\n  }\n\n  return WithApollo;\n}\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\n\nfunction initApolloClient(ctx, initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (true) {\n    return createApolloClient(ctx, initialState);\n  } // Reuse client on the client-side\n\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(ctx, initialState);\n  }\n\n  return globalApolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\n\nfunction createApolloClient(ctx = {}, initialState = {}) {\n  const ssrMode = true;\n  const cache = new InMemoryCache().restore(initialState); // Check out https://github.com/vercel/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  return new ApolloClient({\n    ssrMode,\n    link: createIsomorphLink(ctx),\n    cache\n  });\n}\n\nfunction createIsomorphLink(ctx) {\n  if (true) {\n    const {\n      SchemaLink\n    } = require('apollo-link-schema');\n\n    const {\n      schema\n    } = require('./schema');\n\n    return new SchemaLink({\n      schema,\n      context: ctx\n    });\n  } else {\n    const {\n      HttpLink\n    } = require('apollo-link-http');\n\n    return new HttpLink({\n      uri: '/api/graphql',\n      credentials: 'same-origin'\n    });\n  }\n}","map":{"version":3,"sources":["/Users/qintao.yao/tman/TestDemo2/nextJS_project/next-create1/apollo/client.js"],"names":["Head","ApolloProvider","ApolloClient","InMemoryCache","globalApolloClient","withApollo","PageComponent","ssr","WithApollo","apolloClient","apolloState","pageProps","client","initApolloClient","undefined","displayName","name","console","warn","getInitialProps","ctx","AppTree","res","req","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","ssrMode","restore","link","createIsomorphLink","SchemaLink","require","schema","context","HttpLink","uri","credentials"],"mappings":"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","sourcesContent":["import Head from 'next/head'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\n\nlet globalApolloClient = null\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent, { ssr = true } = {}) {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = apolloClient || initApolloClient(undefined, apolloState)\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    )\n  }\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component'\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.')\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async (ctx) => {\n      const { AppTree } = ctx\n\n      // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n      const apolloClient = (ctx.apolloClient = initApolloClient({\n        res: ctx.res,\n        req: ctx.req,\n      }))\n\n      // Run wrapped getInitialProps methods\n      let pageProps = {}\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx)\n      }\n\n      // Only on the server:\n      if (typeof window === 'undefined') {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps\n        }\n\n        // Only if ssr is enabled\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import('@apollo/react-ssr')\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient,\n                }}\n              />\n            )\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error)\n          }\n\n          // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n          Head.rewind()\n        }\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract()\n\n      return {\n        ...pageProps,\n        apolloState,\n      }\n    }\n  }\n\n  return WithApollo\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\nfunction initApolloClient(ctx, initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return createApolloClient(ctx, initialState)\n  }\n\n  // Reuse client on the client-side\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(ctx, initialState)\n  }\n\n  return globalApolloClient\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nfunction createApolloClient(ctx = {}, initialState = {}) {\n  const ssrMode = typeof window === 'undefined'\n  const cache = new InMemoryCache().restore(initialState)\n\n  // Check out https://github.com/vercel/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode,\n    link: createIsomorphLink(ctx),\n    cache,\n  })\n}\n\nfunction createIsomorphLink(ctx) {\n  if (typeof window === 'undefined') {\n    const { SchemaLink } = require('apollo-link-schema')\n    const { schema } = require('./schema')\n    return new SchemaLink({ schema, context: ctx })\n  } else {\n    const { HttpLink } = require('apollo-link-http')\n\n    return new HttpLink({\n      uri: '/api/graphql',\n      credentials: 'same-origin',\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}