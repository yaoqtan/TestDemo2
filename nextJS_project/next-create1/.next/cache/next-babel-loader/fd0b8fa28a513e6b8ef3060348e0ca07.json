{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/qintao.yao/tman/TestDemo2/nextJS_project/next-create1/apollo/client.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nvar globalApolloClient = null;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApollo(PageComponent) {\n  var _this = this;\n\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n    var client = apolloClient || initApolloClient(undefined, apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    var displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n        var AppTree, apolloClient, pageProps, _yield$import, getDataFromTree, apolloState;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                AppTree = ctx.AppTree; // Initialize ApolloClient, add it to the ctx object so\n                // we can use it in `PageComponent.getInitialProp`.\n\n                apolloClient = ctx.apolloClient = initApolloClient({\n                  res: ctx.res,\n                  req: ctx.req\n                }); // Run wrapped getInitialProps methods\n\n                pageProps = {};\n\n                if (!PageComponent.getInitialProps) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 6;\n                return PageComponent.getInitialProps(ctx);\n\n              case 6:\n                pageProps = _context.sent;\n\n              case 7:\n                if (!false) {\n                  _context.next = 24;\n                  break;\n                }\n\n                if (!(ctx.res && ctx.res.finished)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", pageProps);\n\n              case 10:\n                if (!ssr) {\n                  _context.next = 24;\n                  break;\n                }\n\n                _context.prev = 11;\n                _context.next = 14;\n                return import('@apollo/react-ssr');\n\n              case 14:\n                _yield$import = _context.sent;\n                getDataFromTree = _yield$import.getDataFromTree;\n                _context.next = 18;\n                return getDataFromTree(__jsx(AppTree, {\n                  pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {\n                    apolloClient: apolloClient\n                  }),\n                  __self: _this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 69,\n                    columnNumber: 15\n                  }\n                }));\n\n              case 18:\n                _context.next = 23;\n                break;\n\n              case 20:\n                _context.prev = 20;\n                _context.t0 = _context[\"catch\"](11);\n                // Prevent Apollo Client GraphQL errors from crashing SSR.\n                // Handle them in components via the data.error prop:\n                // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                console.error('Error while running `getDataFromTree`', _context.t0);\n\n              case 23:\n                // getDataFromTree does not call componentWillUnmount\n                // head side effect therefore need to be cleared manually\n                Head.rewind();\n\n              case 24:\n                // Extract query data from the Apollo store\n                apolloState = apolloClient.cache.extract();\n                return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, pageProps), {}, {\n                  apolloState: apolloState\n                }));\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[11, 20]]);\n      }));\n\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n  }\n\n  return WithApollo;\n}\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\n\nfunction initApolloClient(ctx, initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (false) {\n    return createApolloClient(ctx, initialState);\n  } // Reuse client on the client-side\n\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(ctx, initialState);\n  }\n\n  return globalApolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\n\nfunction createApolloClient() {\n  var ctx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var initialState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var ssrMode = false;\n  var cache = new InMemoryCache().restore(initialState); // Check out https://github.com/vercel/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  return new ApolloClient({\n    ssrMode: ssrMode,\n    link: createIsomorphLink(ctx),\n    cache: cache\n  });\n}\n\nfunction createIsomorphLink(ctx) {\n  if (false) {\n    var _require = require('apollo-link-schema'),\n        SchemaLink = _require.SchemaLink;\n\n    var _require2 = require('./schema'),\n        schema = _require2.schema;\n\n    return new SchemaLink({\n      schema: schema,\n      context: ctx\n    });\n  } else {\n    var _require3 = require('apollo-link-http'),\n        HttpLink = _require3.HttpLink;\n\n    return new HttpLink({\n      uri: '/api/graphql',\n      credentials: 'same-origin'\n    });\n  }\n}","map":{"version":3,"sources":["/Users/qintao.yao/tman/TestDemo2/nextJS_project/next-create1/apollo/client.js"],"names":["Head","ApolloProvider","ApolloClient","InMemoryCache","globalApolloClient","withApollo","PageComponent","ssr","WithApollo","apolloClient","apolloState","pageProps","client","initApolloClient","undefined","displayName","name","console","warn","getInitialProps","ctx","AppTree","res","req","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","ssrMode","restore","link","createIsomorphLink","require","SchemaLink","schema","context","HttpLink","uri","credentials"],"mappings":"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","sourcesContent":["import Head from 'next/head'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\n\nlet globalApolloClient = null\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent, { ssr = true } = {}) {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = apolloClient || initApolloClient(undefined, apolloState)\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    )\n  }\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component'\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.')\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async (ctx) => {\n      const { AppTree } = ctx\n\n      // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n      const apolloClient = (ctx.apolloClient = initApolloClient({\n        res: ctx.res,\n        req: ctx.req,\n      }))\n\n      // Run wrapped getInitialProps methods\n      let pageProps = {}\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx)\n      }\n\n      // Only on the server:\n      if (typeof window === 'undefined') {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps\n        }\n\n        // Only if ssr is enabled\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import('@apollo/react-ssr')\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient,\n                }}\n              />\n            )\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error)\n          }\n\n          // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n          Head.rewind()\n        }\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract()\n\n      return {\n        ...pageProps,\n        apolloState,\n      }\n    }\n  }\n\n  return WithApollo\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\nfunction initApolloClient(ctx, initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return createApolloClient(ctx, initialState)\n  }\n\n  // Reuse client on the client-side\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(ctx, initialState)\n  }\n\n  return globalApolloClient\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nfunction createApolloClient(ctx = {}, initialState = {}) {\n  const ssrMode = typeof window === 'undefined'\n  const cache = new InMemoryCache().restore(initialState)\n\n  // Check out https://github.com/vercel/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode,\n    link: createIsomorphLink(ctx),\n    cache,\n  })\n}\n\nfunction createIsomorphLink(ctx) {\n  if (typeof window === 'undefined') {\n    const { SchemaLink } = require('apollo-link-schema')\n    const { schema } = require('./schema')\n    return new SchemaLink({ schema, context: ctx })\n  } else {\n    const { HttpLink } = require('apollo-link-http')\n\n    return new HttpLink({\n      uri: '/api/graphql',\n      credentials: 'same-origin',\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}